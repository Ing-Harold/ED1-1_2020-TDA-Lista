// ---------------------------------------------------------------------------

#pragma hdrstop

#include "ListaPtr.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)

ListaPtr::ListaPtr() {
	longi = 0;
	ptrElementos = NULL;
}

// Funciones de direccion
NodoL* ListaPtr::fin() {
	if (vacia()) {
		cout << "LISTA VACIA\n";
	}
	else {
		NodoL* ptrFin;
		NodoL* x = ptrElementos;
		while (x != NULL) {
			ptrFin = x;
			x = x->sig;
		}
		return ptrFin;
	}
}

NodoL* ListaPtr::primero() {
	if (!this->vacia()) {
		return ptrElementos;
	}
	else {
		cout << "LISTA VACIA\n";
	}
}

NodoL* ListaPtr::siguiente(NodoL* p) {
	if (this->vacia()) {
		cout << "LISTA VACIA\n";
	}
	else if (p->sig == NULL) { // p == fin()
		cout << "DIRECCION INCORRECTA\n";
	}
	else {
		return p->sig;
	}
}

NodoL* ListaPtr::anterior(NodoL* p) {
	if (this->vacia()) {
		cout << "LISTA VACIA\n";
	}
	else if (p == primero()) {
		cout << "DIRECCION INCORRECTA\n";
	}
	else {
		NodoL* x = ptrElementos;
		NodoL* ant = NULL;
		while (x != NULL) {
			if (x == p) {
				return ant;
			}
			ant = x;
			x = x->sig;
		}
	}
}

// Selector
int ListaPtr::recupera(NodoL* p) {
	if (this->vacia()) {
		cout << "LISTA VACIA\n";
	}
	else {
		p->elemento;
	}
}

// modificadores
void ListaPtr::inserta(NodoL* p, int e) {
	NodoL* x = new NodoL;
	if (x != NULL) {
		x->elemento = e;
		x->sig = NULL;
		if (vacia()) {
			ptrElementos = x;
			longi = 1;
		}
		else {
			longi++;
			if (p == primero()) {
				x->sig = p;
				ptrElementos = x;
			}
			else {
				NodoL* ant = anterior(p);
				ant->sig = x;
				x->sig = p;
			}
		}
	}
}

void ListaPtr::suprime(NodoL* p) {
	if (longi == 0) {
		cout << "LISTA VACIA\n";
		return;
	}
	else if (p == ptrElementos) {
		NodoL*x = ptrElementos;
		ptrElementos = ptrElementos->sig;
		delete(x);
	}
	else {
		NodoL* ant = anterior(p);
		ant->sig = p->sig;
		delete(p);
	}
	longi--;
}

void ListaPtr::modifica(NodoL* p, int e) {
	if (vacia()) {
		cout << "LISTA VACIA\n";
	}
	else {
		p->elemento = e;
	}
}

//
bool ListaPtr::vacia() {
	return longi == 0; // ptrElementos == NULL;
}

int ListaPtr::longitud() {
	return longi;
}

string to_string(int value) {
	if (value == 0)
		return "0";
	bool es_negativo = value < 0;
	string r = "";
	if (es_negativo)
		value *= -1;
	while (value != 0) {
		char c = value % 10 + 0x30;
		r = c + r;
		value = value / 10;
	}
	return es_negativo ? "-" + r : r;
}

string ListaPtr::toStr() {
	string r = "[";
	NodoL* x = ptrElementos;
	while (x != NULL) {
		r += to_string(x->elemento);
		if (x->sig != NULL)
			r += ",";
		x = x->sig;
	}
	r = r + "]";
	return r;
}

//
NodoL* ListaPtr::localiza(int e) {
	NodoL* x = ptrElementos;
	while (x != NULL) {
		if (x->elemento == e)
			return x;
		x = x->sig;
	}
	return NULL;
}

void ListaPtr::elimina_dato(int e) {
	NodoL* x = ptrElementos;
	while (x != NULL) {
		if (x->elemento = e) {
			NodoL* sup = x;
			x = x->sig;
			suprime(sup);
		}
		else {
			x = x->sig;
		}
	}
}

void ListaPtr::anula() {
	longi = 0;
	NodoL* x = ptrElementos;
	while (x != NULL) {
		NodoL* aux = x;
		x = x->sig;
		delete(aux);
	}
	ptrElementos = NULL;
}

void ListaPtr::inserta_inicio(int e) {
	inserta(ptrElementos, e);
}

void ListaPtr::inserta_fin(int e) {
	NodoL* x = new NodoL;
	x->elemento = e;
	x->sig = NULL;
	if (vacia()) {
		ptrElementos = x;

	}
	else {
		NodoL* final = fin();
		final->sig = x;
	}
}
